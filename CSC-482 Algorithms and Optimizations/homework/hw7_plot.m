
N = [1 2 3 4 5 6 7 8 9 10 11 12];
brute_small_actual_time = [ 0.000002 0.000002 0.000002 0.000006 0.000048 0.000142 0.001159 0.009903 0.097375 1.029026 12.236138 166.187681 ];
T10 = 1.029026;
brute_small_projected_time = [
        T10 / (10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2)
        T10 / (10 * 9 * 8 * 7 * 6 * 5 * 4 * 3)   
        T10 /( 10 * 9 * 8 * 7 * 6 * 5 * 4) 
        T10 / (10 * 9 * 8 * 7 * 6 * 5)    
        T10 / (10 * 9 * 8 * 7 * 6)    
        T10 / (10 * 9 * 8 * 7)
        (T10 /(10 * 9 * 8)) 
        (T10 /(10 * 9)) 
        (T10 / 10)
        T10  
        (T10 * 11)
        (T10 * 11 * 12)
];


% (A) Brute Force vs. Projected O(N!)
figure();
plot(N, brute_small_actual_time, '-o', N, brute_small_projected_time, '-o');
set(findall(gca, 'Type', 'Line'),'LineWidth', 0.5);
set(gca, 'yscale', 'log');
set(gca, 'xtick', N);
title('Brute Force vs. Projected O(N!)');
xlabel('Size (N)');
ylabel('Time (T)');
legend('Brute (Actual)', 'Brute (Projected)', 'Location', 'southeast');



N = [4 5 6 7 8 9 10];
brute_small_avg_time =  [1.102876 1.202456 1.205922 1.140994 1.339625 1.073947 1.085159];
greedy_small_avg_time = [0.000013 0.000013 0.000017 0.000014 0.000014 0.000014 0.000014];
monte_small_avg_time =  [0.004159 0.004692 0.006404 0.004584 0.004558 0.004009 0.004437];
kruskal_approx_small_avg_time = [0.000080 0.000070 0.000130 0.000087 0.000101 0.000078 0.000078];
prims_approx_small_avg_time = [0.000124 0.000120 0.000131 0.000122 0.000133 0.000124 0.000129];
kruskal_a_star_small_avg_time = [0.004978 0.005586 0.005998 0.005044 0.005689 0.004766 0.004827];
prims_a_star_small_avg_time = [0.004295 0.005081 0.004841 0.004423 0.005499 0.004232 0.004151];


% (B) Heuristics vs. Brute Force (small N), Time Performance
figure();
plot(N, brute_small_avg_time, '-o', ...
  N, greedy_small_avg_time, '-o', ...
  N, monte_small_avg_time, '-o', ...
  N, kruskal_approx_small_avg_time, '-o', ...
  N, prims_approx_small_avg_time, '-o', ...
  N, kruskal_a_star_small_avg_time, '-o', ...
  N, prims_a_star_small_avg_time, '-o');

set(gca, 'yscale', 'log');
set(gca, 'xtick', N);
title('Heuristics vs. Brute Force (small N), Time Performance');
set(findall(gca, 'Type', 'Line'),'LineWidth', 0.5);
xlabel('Size (N)');
ylabel('Time (T)');
legend('Brute', 'Greedy', 'Monte Carlo', "Kruskal's MST + Two-Approx.", ...
"Prim's MST + Two-Approx.", "Kruskal's MST + A*", ...
"Prim's MST + A*", ...
'Location', 'bestoutside');


brute_small_avg_quality = [1.000000 1.000000 1.000000 1.000000 1.000000 1.000000 1.000000];
greedy_small_avg_quality = [1.000000 1.000000 1.000000 1.000000 1.000000 1.000000 1.000000];
monte_small_avg_quality = [108.500000 107.700000 114.600000 119.200000 114.000000 137.300000 122.700000];
kruskal_approx_small_avg_quality = [2.000000 2.200000 2.300000 2.400000 2.400000 2.700000 2.500000];
prims_approx_small_avg_quality = [1.000000 1.000000 1.000000 1.100000 1.000000 1.300000 1.200000];
kruskal_a_star_small_avg_quality = [1.000000 1.000000 1.000000 1.000000 1.000000 1.000000 1.000000];
prims_a_star_small_avg_quality = [1.000000 1.000000 1.200000 1.200000 1.100000 1.200000 1.200000];

% (C) Heuristics vs Each Other vs Optimal Solution, (small N), Quality of Solution
figure();
plot(N, brute_small_avg_quality, '-o', ...
  N, greedy_small_avg_quality, '-o', ...
  N, monte_small_avg_quality, '-o', ...
  N, kruskal_approx_small_avg_quality, '-o', ...
  N, prims_approx_small_avg_quality, '-o', ...
  N, kruskal_a_star_small_avg_quality, '-o', ...
  N, prims_a_star_small_avg_quality, '-o');

set(gca, 'yscale', 'log');
set(gca, 'xtick', N);
title('Heuristics vs Each Other vs Optimal Solution, (small N), Quality of Solution');
set(findall(gca, 'Type', 'Line'),'LineWidth', 0.5);
xlabel('Size (N)');
ylabel('Quality (Q)');
legend('Brute', 'Greedy', 'Monte Carlo', "Kruskal's MST + Two-Approx.", ...
"Prim's MST + Two-Approx.", "Kruskal's MST + A*", ...
"Prim's MST + A*", ...
'Location', 'bestoutside');


brute_small_avg_cost = [12.000000 15.000000 16.000000 20.000000 21.000000 22.000000 25.000000];
greedy_small_avg_cost = [14.000000 17.000000 18.000000 25.000000 24.000000 29.000000 29.000000];
monte_small_avg_cost = [2072.000000 2400.000000 2740.000000 3392.000000 3565.000000 4108.000000 4551.000000];
kruskal_approx_small_avg_cost =[30.000000 38.000000 44.000000 52.000000 61.000000 66.000000 76.000000];
prims_approx_small_avg_cost = [18.000000 21.000000 26.000000 33.000000 33.000000 40.000000 43.000000];
kruskal_a_star_small_avg_cost = [14.000000 17.000000 18.000000 25.000000 24.000000 29.000000 29.000000];
prims_a_star_small_avg_cost = [17.000000 20.000000 24.000000 30.000000 30.000000 36.000000 43.000000];


% (Not required) Heuristics vs Each Other vs Optimal Solution, (small N), Costs
figure();
plot(N, brute_small_avg_cost, '-o', ...
  N, greedy_small_avg_cost, '-o', ...
  N, monte_small_avg_cost, '-o', ...
  N, kruskal_approx_small_avg_cost, '-o', ...
  N, prims_approx_small_avg_cost, '-o', ...
  N, kruskal_a_star_small_avg_cost, '-o', ...
  N, prims_a_star_small_avg_cost, '-o');

% set(gca, 'yscale', 'log');
% set(gca, 'xtick', N);
title('Heuristics vs Each Other vs Optimal Solution, (small N), Costs');
set(findall(gca, 'Type', 'Line'),'LineWidth',0.5);
xlabel('Size (N)');
ylabel('Cost (C)');
legend('Brute', 'Greedy', 'Monte Carlo', "Kruskal's MST + Two-Approx.", ...
"Prim's MST + Two-Approx.", "Kruskal's MST + A*", ...
"Prim's MST + A*", ...
'Location', 'bestoutside');


greedy_large_avg_cost = [29.000000 53.000000 77.000000 05.000000 25.000000 53.000000 77.000000 97.000000 32.000000 45.000000 78.000000 04.000000 40.000000 52.000000 72.000000 10.000000 23.000000 68.000000 64.000000 11.000000 19.000000 57.000000 97.000000 03.000000 05.000000 46.000000 00.000000 40.000000 14.000000 86.000000 68.000000 92.000000 07.000000 59.000000 70.000000 89.000000 07.000000 25.000000 03.000000 60.000000 42.000000 97.000000 99.000000 51.000000 70.000000 72.000000 45.000000 84.000000 35.000000 76.000000 10.000000 39.000000 09.000000 37.000000 96.000000 54.000000 07.000000 23.000000 45.000000 12.000000 58.000000 76.000000 14.000000 21.000000 46.000000 27.000000 13.000000 88.000000 17.000000 95.000000 20.000000 39.000000 32.000000 90.000000 81.000000 18.000000 32.000000 57.000000 35.000000 01.000000 36.000000 74.000000 66.000000 44.000000 66.000000 36.000000 84.000000 35.000000 25.000000 47.000000 40.000000 76.000000 42.000000 91.000000 06.000000 35.000000 25.000000 88.000000 99.000000 23.000000];
monte_large_avg_cost = [4418.000000 8274.000000 12015.000000 6056.000000 9733.000000 4196.000000 7388.000000 1607.000000 6466.000000 9097.000000 3972.000000 7680.000000 0821.000000 6585.000000 7307.000000 3305.000000 7332.000000 2428.000000 2327.000000 7506.000000 9565.000000 6331.000000 1302.000000 3779.000000 6648.000000 02370.000000 07033.000000 10826.000000 13525.000000 16069.000000 20626.000000 23887.000000 27850.000000 35338.000000 36643.000000 41375.000000 43923.000000 48726.000000 3804.000000 9317.000000 2877.000000 5184.000000 8485.000000 9694.000000 5844.000000 8946.000000 7390.000000 5123.000000 1334.000000 6503.000000 8131.000000 7715.000000 7697.000000 7846.000000 7470.000000 4747.000000 4519.000000 1754.000000 1118.000000 0602.000000 6634.000000 2699.000000 4334.000000 5619.000000 1113.000000 9961.000000 1280.000000 0646.000000 6432.000000 0109.000000 9077.000000 5696.000000 6129.000000 3041.000000 0214.000000 2468.000000 7625.000000 8403.000000 7140.000000 8175.000000 2671.000000 1490.000000 4995.000000 6698.000000 7284.000000 6655.000000 7309.000000 8383.000000 7885.000000 2876.000000 4232.000000 7695.000000 6372.000000 8438.000000 0562.000000 8331.000000 6175.000000 6379.000000 1338.000000 1408.000000];
kruskal_approx_large_avg_cost = [71.000000 141.000000 210.000000 271.000000 342.000000 418.000000 479.000000 548.000000 629.000000 683.000000 769.000000 821.000000 892.000000 954.000000 1031.00000 1091.00000 1194.00000 1217.00000 1293.00000 1350.00000 1431.00000 1526.00000 1549.00000 1658.00000 1668.00000 1765.00000 1838.00000 1935.00000 1985.00000 2061.00000 2092.00000 2229.00000 2204.00000 2404.00000 2370.00000 2512.00000 2511.00000 2509.00000 2632.00000 2697.00000 2703.00000 2898.00000 2912.00000 3045.00000 3144.00000 3065.00000 3282.00000 3215.00000 3260.00000 3379.00000 3526.00000 3559.00000 3624.00000 3562.00000 3809.00000 3804.00000 3858.00000 4067.00000 3965.00000 4130.00000 4075.00000 4203.00000 4205.00000 4463.00000 4428.00000 4528.00000 4497.00000 4641.00000 4666.00000 4751.00000 4882.00000 4950.00000 4892.00000 4991.00000 5203.00000 5125.00000 5183.00000 5257.00000 5415.00000 5456.00000 5437.00000 5639.00000 5569.00000 5735.00000 5789.00000 5819.00000 5840.00000 6175.00000 6112.00000 6073.00000 6146.00000 6074.00000 6345.00000 6322.00000 6383.00000 6519.00000 6658.00000 6627.00000 6824.00000 6766.00000];
prims_approx_large_avg_cost = [44.000000 80.000000 116.000000 159.000000 204.000000 232.000000 276.000000 308.000000 353.000000 385.000000 435.000000 478.000000 515.000000 558.000000 559.000000 624.000000 665.000000 701.000000 722.000000 785.000000 821.000000 890.000000 918.000000 942.000000 950.000000 999.000000 1090.000000 1075.000000 1121.000000 1085.000000 1234.000000 1218.000000 1275.000000 1329.000000 1410.000000 1441.000000 1394.000000 1460.000000 1524.000000 1522.000000 1640.000000 1653.000000 1740.000000 1646.000000 1746.000000 1736.000000 1924.000000 1797.000000 1846.000000 1995.000000 2006.000000 2046.000000 1991.000000 2117.000000 2210.000000 2013.000000 2213.000000 2196.000000 2264.000000 2383.000000 2377.000000 2502.000000 2448.000000 2526.000000 2609.000000 2504.000000 2586.000000 2676.000000 2607.000000 2716.000000 2735.000000 2816.000000 2769.000000 2796.000000 2971.000000 2907.000000 2907.000000 3094.000000 3062.000000 3077.000000 3056.000000 3368.000000 3186.000000 3106.000000 3239.000000 3494.000000 3309.000000 3526.000000 3592.000000 3600.000000 3606.000000 3660.000000 3704.000000 3586.000000 3623.000000 3784.000000 4070.000000 3760.000000 3953.000000 3897.000000];
kruskal_a_star_large_avg_cost = [29.000000 53.000000 77.000000 105.000000 125.000000 153.000000 177.000000 197.000000 232.000000 245.000000 278.000000 304.000000 340.000000 352.000000 372.000000 410.000000 423.000000 468.000000 464.000000 511.000000 519.000000 557.000000 597.000000 603.000000 605.000000 646.000000 700.000000 740.000000 714.000000 686.000000 768.000000 792.000000 807.000000 859.000000 870.000000 889.000000 907.000000 925.000000 1003.000000 1060.000000 1042.000000 1097.000000 1099.000000 1051.000000 1070.000000 1172.000000 1245.000000 1184.000000 1235.000000 1276.000000 1210.000000 1339.000000 1309.000000 1337.000000 1396.000000 1354.000000 1407.000000 1323.000000 1545.000000 1612.000000 1558.000000 1576.000000 1514.000000 1621.000000 1646.000000 1627.000000 1713.000000 1788.000000 1717.000000 1695.000000 1720.000000 1839.000000 1732.000000 1790.000000 1881.000000 1918.000000 1832.000000 1957.000000 1935.000000 2001.000000 2036.000000 2074.000000 2066.000000 2044.000000 2166.000000 2236.000000 2084.000000 2335.000000 2125.000000 2247.000000 2240.000000 2276.000000 2442.000000 2291.000000 2406.000000 2335.000000 2525.000000 2388.000000 2599.000000 2423.000000];
prims_a_star_large_avg_cost = [36.000000 69.000000 98.000000 131.000000 164.000000 207.000000 239.000000 251.000000 331.000000 314.000000 366.000000 405.000000 403.000000 460.000000 463.000000 541.000000 574.000000 574.000000 690.000000 599.000000 635.000000 729.000000 769.000000 834.000000 855.000000 785.000000 940.000000 881.000000 927.000000 957.000000 981.000000 1064.000000 1057.000000 1111.000000 1158.000000 1169.000000 1163.000000 1133.000000 1210.000000 1437.000000 1292.000000 1313.000000 1347.000000 1454.000000 1497.000000 1508.000000 1544.000000 1555.000000 1698.000000 1538.000000 1542.000000 1781.000000 1606.000000 1762.000000 1678.000000 1802.000000 1836.000000 1812.000000 1851.000000 2190.000000 2007.000000 1905.000000 1925.000000 2057.000000 2183.000000 2113.000000 2052.000000 2266.000000 2024.000000 2153.000000 2265.000000 2310.000000 2236.000000 2439.000000 2571.000000 2464.000000 2518.000000 2658.000000 2280.000000 2415.000000 2550.000000 2785.000000 2753.000000 2633.000000 2698.000000 2910.000000 2823.000000 3060.000000 2959.000000 3143.000000 2748.000000 3140.000000 2922.000000 2994.000000 3093.000000 2950.000000 3287.000000 3065.000000 3275.000000 3021.000000];

N = linspace(1, 1000);

% (D) Heuristics vs Each Other, (Large N), average solution costs
figure();
plot(N, greedy_large_avg_cost, ...
  N, monte_large_avg_cost, ...
  N, kruskal_approx_large_avg_cost, ...
  N, prims_approx_large_avg_cost, ...
  N, kruskal_a_star_large_avg_cost, ...
  N, prims_a_star_large_avg_cost);

% set(gca, 'yscale', 'log');
% set(gca, 'xtick', N);
title('Heuristics vs Each Other vs Optimal Solution, (large N), Costs');
set(findall(gca, 'Type', 'Line'),'LineWidth',1);
xlabel('Size (N)');
ylabel('Cost (C)');
legend('Greedy', 'Monte Carlo', "Kruskal's MST + Two-Approx.", ...
"Prim's MST + Two-Approx.", "Kruskal's MST + A*", ...
"Prim's MST + A*", ...
'Location', 'bestoutside');



greedy_large_avg_time = [0.000014 0.000015 0.000015 0.000015 0.000016 0.000015 0.000019 0.000014 0.000014 0.000015 0.000016 0.000015 0.000014 0.000014 0.000015 0.000015 0.000016 0.000016 0.000014 0.000014 0.000014 0.000014 0.000014 0.000014 0.000017 0.000014 0.000014 0.000014 0.000015 0.000014 0.000015 0.000022 0.000014 0.000016 0.000014 0.000017 0.000014 0.000015 0.000014 0.000016 0.000016 0.000015 0.000014 0.000016 0.000016 0.000014 0.000015 0.000024 0.000017 0.000014 0.000014 0.000014 0.000016 0.000013 0.000016 0.000018 0.000017 0.000014 0.000015 0.000014 0.000015 0.000014 0.000016 0.000015 0.000014 0.000014 0.000015 0.000013 0.000014 0.000014 0.000014 0.000017 0.000014 0.000014 0.000015 0.000015 0.000015 0.000013 0.000014 0.000014 0.000015 0.000015 0.000014 0.000013 0.000015 0.000015 0.000014 0.000014 0.000013 0.000015 0.000013 0.000017 0.000013 0.000014 0.000015 0.000014 0.000014 0.000016 0.000013 0.000014];
monte_large_avg_time = [0.004125 0.004161 0.004403 0.004463 0.004551 0.004204 0.004163 0.004182 0.004266 0.004207 0.004133 0.004148 0.004246 0.004107 0.004157 0.004189 0.004149 0.004519 0.004310 0.004478 0.004538 0.004459 0.004488 0.004623 0.004253 0.004232 0.004126 0.004149 0.004271 0.004243 0.004274 0.004419 0.004194 0.004479 0.004909 0.004200 0.004360 0.004170 0.004193 0.004275 0.004201 0.004328 0.004511 0.004425 0.004649 0.004343 0.004605 0.004410 0.004203 0.004131 0.004276 0.004155 0.004142 0.004223 0.004194 0.004208 0.004320 0.004077 0.004178 0.004120 0.004280 0.004464 0.004188 0.004125 0.004091 0.004112 0.004173 0.004147 0.004061 0.004059 0.004134 0.004086 0.004089 0.004104 0.004110 0.004087 0.004118 0.004045 0.004067 0.004134 0.004014 0.004097 0.004068 0.004089 0.004110 0.004058 0.004032 0.004080 0.004080 0.004047 0.004110 0.004179 0.004076 0.004058 0.004096 0.004099 0.004086 0.004058 0.004085 0.004086];
kruskal_approx_large_avg_time = [0.000105 0.000091 0.000082 0.000098 0.000086 0.000088 0.000084 0.000147 0.000091 0.000098 0.000084 0.000081 0.000083 0.000085 0.000082 0.000083 0.000085 0.000085 0.000085 0.000093 0.000094 0.000090 0.000092 0.000087 0.000087 0.000088 0.000087 0.000086 0.000095 0.000097 0.000099 0.000116 0.000093 0.000091 0.000084 0.000085 0.000102 0.000086 0.000091 0.000093 0.000084 0.000088 0.000103 0.000152 0.000100 0.000095 0.000090 0.000083 0.000082 0.000083 0.000089 0.000082 0.000084 0.000091 0.000088 0.000083 0.000082 0.000094 0.000086 0.000084 0.000084 0.000085 0.000104 0.000086 0.000086 0.000086 0.000082 0.000083 0.000087 0.000087 0.000082 0.000083 0.000091 0.000084 0.000086 0.000082 0.000083 0.000084 0.000084 0.000082 0.000081 0.000082 0.000088 0.000087 0.000086 0.000083 0.000086 0.000096 0.000084 0.000089 0.000095 0.000091 0.000082 0.000086 0.000084 0.000086 0.000083 0.000094 0.000080 0.000086];
prims_approx_large_avg_time = [0.000133 0.000144 0.000143 0.000134 0.000163 0.000124 0.000132 0.000155 0.000137 0.000132 0.000129 0.000126 0.000147 0.000129 0.000132 0.000124 0.000129 0.000161 0.000131 0.000142 0.000136 0.000135 0.000144 0.000127 0.000167 0.000126 0.000134 0.000127 0.000130 0.000131 0.000146 0.000160 0.000139 0.000136 0.000145 0.000128 0.000126 0.000140 0.000126 0.000134 0.000125 0.000138 0.000146 0.000139 0.000188 0.000132 0.000132 0.000139 0.000127 0.000128 0.000132 0.000128 0.000125 0.000134 0.000126 0.000133 0.000129 0.000128 0.000127 0.000136 0.000129 0.000149 0.000138 0.000126 0.000127 0.000130 0.000136 0.000126 0.000126 0.000122 0.000131 0.000142 0.000130 0.000129 0.000126 0.000142 0.000127 0.000130 0.000133 0.000124 0.000131 0.000135 0.000122 0.000125 0.000138 0.000126 0.000140 0.000133 0.000126 0.000130 0.000130 0.000128 0.000135 0.000125 0.000125 0.000137 0.000135 0.000130 0.000127 0.000127];
kruskal_a_star_large_avg_time = [0.004845 0.004704 0.005585 0.005505 0.005173 0.004859 0.004829 0.004777 0.004897 0.004931 0.004909 0.004822 0.004874 0.004824 0.004990 0.004898 0.005093 0.005615 0.004885 0.004951 0.005408 0.005384 0.005221 0.005240 0.005025 0.004818 0.004881 0.004877 0.004882 0.004861 0.004898 0.005116 0.005045 0.005138 0.005295 0.005216 0.005107 0.005180 0.005072 0.004981 0.004977 0.005227 0.004967 0.005053 0.005096 0.005396 0.004989 0.005004 0.004944 0.004776 0.004888 0.004881 0.004888 0.004880 0.004952 0.004892 0.004843 0.004815 0.004967 0.005050 0.005024 0.005192 0.004847 0.005012 0.004749 0.004763 0.004809 0.004744 0.004777 0.004733 0.004900 0.004830 0.004777 0.004822 0.004774 0.004747 0.004817 0.004706 0.004756 0.004811 0.004756 0.004800 0.004768 0.004733 0.004802 0.004759 0.004767 0.004765 0.004740 0.004720 0.004788 0.004854 0.004775 0.004777 0.004759 0.004768 0.004751 0.004757 0.004768 0.004751];
prims_a_star_large_avg_time = [0.004333 0.004418 0.004557 0.005049 0.005404 0.004417 0.004322 0.004565 0.004311 0.004401 0.004527 0.004344 0.004414 0.004293 0.004338 0.004256 0.004433 0.004828 0.004541 0.004536 0.004907 0.004837 0.004955 0.004776 0.004789 0.004416 0.004358 0.004317 0.004472 0.004404 0.004623 0.004629 0.004459 0.004826 0.005053 0.004835 0.004500 0.004604 0.004472 0.004611 0.004591 0.004597 0.004728 0.004454 0.004676 0.004492 0.004565 0.004576 0.004294 0.004372 0.004306 0.004318 0.004275 0.004478 0.004555 0.004391 0.004404 0.004261 0.004326 0.004737 0.004522 0.004505 0.004500 0.004439 0.004305 0.004379 0.004392 0.004344 0.004361 0.004400 0.004322 0.004262 0.004222 0.004309 0.004291 0.004217 0.004261 0.004327 0.004325 0.004278 0.004305 0.004237 0.004300 0.004261 0.004278 0.004374 0.004223 0.004273 0.004252 0.004274 0.004286 0.004258 0.004372 0.004262 0.004293 0.004346 0.004270 0.004275 0.004233 0.004363];

% (D.1) Heuristics vs. Brute Force (large N), Time Performance
figure();
plot(N, greedy_large_avg_time, ...
  N, monte_large_avg_time, ...
  N, kruskal_approx_large_avg_time, ...
  N, prims_approx_large_avg_time, ...
  N, kruskal_a_star_large_avg_time, ...
  N, prims_a_star_large_avg_time);

% set(gca, 'yscale', 'log');
% set(gca, 'xtick', N);
title('Heuristics vs Each Other vs Optimal Solution,(large N), Time Performance');
set(findall(gca, 'Type', 'Line'),'LineWidth',1);
xlabel('Size (N)');
ylabel('Time (T)');
legend('Greedy', 'Monte Carlo', "Kruskal's MST + Two-Approx.", ...
"Prim's MST + Two-Approx.", "Kruskal's MST + A*", ...
"Prim's MST + A*", ...
'Location', 'bestoutside');